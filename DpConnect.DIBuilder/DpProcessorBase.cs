using DpConnect.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DpConnect.DIBuilder
{
    internal abstract class DpProcessorBase : IDpProcessor
    {        
        private readonly IDpBinder _binder;        

        public DpProcessorBase(IDpBinder dpBinder, string name)
        {
            
            _binder = dpBinder;
            Name = name;

            
        }
        //Связывать процессор с провайдором только после того, как процессору присовили его имя?
        //То есть, экземпляр процессора создается в контейнере, но как связать нужные точки для этого процессора?
        //Процессор передается как зависимость другому классу, который будет использовать этот процессор.
        //Этот класс должен знать, какой процессор он использует.
        //С другой стороны, он может этого и не знать. То есть, ему безразлично, что он использует. Как тогда конфигурировать?
        //Имя - это как идентификатор, для которого будет задан набор точек.
        //Допустим, если мы описываем класс Вентилятор, то в конечном итоге мы его должны назначить ему 
        //Точки из ПЛК. 
        //То есть, разные объекты Вентилятора будут связаны с разными ПЛК.
        //Кто осуществляет эту привязку? 
        //Логично, что DpBinder или DpBuilder, так как он знает конфигурацию. Тогда, он должен создавать эти объекты?
        //Тогда в эти объекты не получится передать зависимости из контейнера...
        //А если объекты создает контейнер, то контейнер не сможет дать имя такому объекту.
        //Может использовать фабрику?
        //То есть, если некоторый класс хочет использовать Вентилятор, то он должен будет создаеть его через фабрику.
        //Фабрика получит все зависмости из контейнера и сможет создать объект.
        //Но фабрика тоже не знает Имя вентилятора, то есть мы приходим к тому, что класс, зависимый от Вентилятор, должен знать, что за Вентилятор он исопльзует?
        
        //Вообще идея создавать объекты через фабрику хороша тем, что можно получить несколько объектов из контейнера с необходимми зависимостями
        //Но фабрику можно сделать и позднее...


        //Если мы связываем процессор по имени, то как будто его тип не важен. С одной стороны это хорошо. Мы в конфиге можем не указывать тип процессора, а только его имя

        //Как будто связывать процессор с точками должен не сам процессор, а кто-то другой...
        
        //Может, создавать объекты должен DpBuilder, но получать их должен через фабрику. Вабрика будет в контейнере и создаст объект со всеми зависимостями


        public string Name { get; set; }

        public virtual void OnDpInitialized()
        {

        }

    }
}

